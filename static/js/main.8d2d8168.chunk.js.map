{"version":3,"sources":["Components/StateWiseData/statewisedata.jsx","App.js","reportWebVitals.js","index.js"],"names":["Statewise","useState","data","setData","getCovidData","a","fetch","catch","error","console","log","res","json","OriginalData","statewise","useEffect","className","icon","style","color","map","curElem","index","textAlign","state","confirmed","recovered","deaths","deltaconfirmed","deltadeaths","deltarecovered","active","lastupdatedtime","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RA0EeA,EAtEG,WAEd,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEMC,EAAY,uCAAG,8BAAAC,EAAA,sEACCC,MAAM,2CAA2CC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MAD7E,cACXG,EADW,gBAEUA,EAAIC,OAFd,OAEXC,EAFW,OAGjBJ,QAAQC,IAAI,iBAAkBG,GAC9BV,EAAQU,EAAaC,WAJJ,2CAAH,qDAYlB,OALAC,qBAAU,WAENX,MACD,IAGC,qCACI,sBAAKY,UAAU,uBAAf,UACI,qBAAKA,UAAU,eAAf,SACI,qBAAIA,UAAU,8BAAd,UACI,uBAAMA,UAAU,mBAAhB,UACI,cAAC,IAAD,CAAMC,KAAK,4BADf,eADJ,wCAIJ,qBAAKD,UAAU,mBAAf,SACI,wBAAOA,UAAU,+BAAjB,UAEI,uBAAOA,UAAU,aAAaE,MAAO,CAAEC,MAAO,cAA9C,SACI,+BACI,wCACA,4CACA,4CACA,8CACA,iDACA,6CACA,iDACA,yCACA,yDAGR,gCAEQjB,EAAKkB,KAAI,SAACC,EAASC,GACf,OACI,qBAAgBJ,MAAO,CAAEK,UAAW,UAApC,UACI,mCAAMF,EAAQG,SACd,mCAAMH,EAAQI,aACd,mCAAMJ,EAAQK,aACd,mCAAML,EAAQM,UACd,mCAAMN,EAAQO,kBACd,mCAAMP,EAAQQ,eACd,mCAAMR,EAAQS,kBACd,mCAAMT,EAAQU,UACd,mCAAMV,EAAQW,qBATTV,gBAmBrC,wBAAQN,UAAU,gCAAlB,SACI,2CAAa,sBAAME,MAAO,CAAEC,MAAO,OAAtB,0BAAb,2BCtDDc,MAVf,WAGE,OACE,mCACE,cAAC,EAAD,OCGSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8d2d8168.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport '../StateWiseData/statewise.css';\r\nimport { Icon } from '@iconify/react';\r\n\r\nconst Statewise = () => {\r\n\r\n    const [data, setData] = useState([]);\r\n\r\n    const getCovidData = async () => {\r\n        const res = await fetch('https://data.covid19india.org/data.json').catch(error => console.log(error));;\r\n        const OriginalData = await res.json();\r\n        console.log('OriginalData :', OriginalData);\r\n        setData(OriginalData.statewise);\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        getCovidData();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container-fluid mt-5\">\r\n                <div className=\"main-heading\">\r\n                    <h1 className=\"mb-5 text-center text-white\">\r\n                        <span className=\"font-weight-bold\">\r\n                            <Icon icon=\"emojione:flag-for-india\" />&nbsp;INDIA</span> COVID-19 DASHBOARD (State-Wise)</h1>\r\n                </div>\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"table table-hover text-white\">\r\n\r\n                        <thead className=\"thead-dark\" style={{ color: 'darkviolet' }}>\r\n                            <tr>\r\n                                <th> State</th>\r\n                                <th> Comfirmed</th>\r\n                                <th> Recovered</th>\r\n                                <th> Total Death</th>\r\n                                <th>Delta confirmed</th>\r\n                                <th>Delta Death</th>\r\n                                <th>Delta Recovered</th>\r\n                                <th> Active</th>\r\n                                <th> Last Updated Time</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                data.map((curElem, index) => {\r\n                                    return (\r\n                                        <tr key={index} style={{ textAlign: 'center' }}>\r\n                                            <td> {curElem.state}</td>\r\n                                            <td> {curElem.confirmed}</td>\r\n                                            <td> {curElem.recovered}</td>\r\n                                            <td> {curElem.deaths}</td>\r\n                                            <td> {curElem.deltaconfirmed}</td>\r\n                                            <td> {curElem.deltadeaths}</td>\r\n                                            <td> {curElem.deltarecovered}</td>\r\n                                            <td> {curElem.active}</td>\r\n                                            <td> {curElem.lastupdatedtime}</td>\r\n                                        </tr>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </tbody>\r\n\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            <footer className=\"footer text-center text-white\">\r\n                <p>Made With <span style={{ color: 'red' }}>❤️</span> By Alok Jadhav</p>\r\n            </footer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Statewise;","import React from 'react';\nimport './App.css';\nimport Statewise from './Components/StateWiseData/statewisedata';\n\nfunction App() {\n\n\n  return (\n    <>\n      <Statewise />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}